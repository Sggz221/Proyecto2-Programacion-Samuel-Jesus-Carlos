plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    //Serialization
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23'
    //Jacoco
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.example.newteam'
    mainClass = 'org.example.newteam.HelloApplication'
}
kotlin {
    jvmToolchain(21)
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    // Logger
    implementation("org.lighthousegames:logging:1.3.0")
    implementation("ch.qos.logback:logback-classic:1.4.14")

    // BBDD H2
    implementation("com.h2database:h2:2.2.224")

    // JDBI
    // Reflexión
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    // Core
    implementation("org.jdbi:jdbi3-core:3.48.0")
    // SQL Object
    implementation("org.jdbi:jdbi3-sqlobject:3.48.0")
    // Extensión para Kotlin
    implementation("org.jdbi:jdbi3-kotlin:3.48.0")
    // Extensión de SQL Object para Kotlin
    implementation("org.jdbi:jdbi3-kotlin-sqlobject:3.48.0")

    // Result
    implementation("com.michael-bull.kotlin-result:kotlin-result:2.0.0")

    // Kotlin Serialization Json
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0")

    // Kotlin Serialization XML
    implementation("io.github.pdvrieze.xmlutil:serialization-jvm:0.90.3")

    // Vaadin
    implementation("com.vaadin:open:8.5.0.4")

    // Caché Caffeine
    implementation("com.github.ben-manes.caffeine:caffeine:3.2.0")

    // Koin
    implementation(platform("io.insert-koin:koin-bom:3.5.6"))
    implementation("io.insert-koin:koin-core")

    // JUnit
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // Jacoco
    implementation("org.jacoco:org.jacoco.core:0.8.12")
    testImplementation "org.jetbrains.kotlin:kotlin-test:1.9.23"

    // Reflexión de tipos genéricos, las versiones más recientes de JDBI no la incluyen por defecto
    implementation 'io.leangen.geantyref:geantyref:1.3.0'

    //BCrypt
    implementation("org.mindrot:jbcrypt:0.4")

}

test {
    useJUnitPlatform()
    // finalizedBy(tasks.jacocoTestReport)
    // Con abrimos junit para que pueda usar todo, incluso los de Kotlin
    /* jvmArgs(
             "--add-opens", "java.base/java.lang=ALL-UNNAMED",
             "--add-opens", "java.base/java.util=ALL-UNNAMED",
             "--add-reads", "org.junit.jupiter.api=kotlin.stdlib"
     )*/
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

// Jar ejecutable

jar {
    manifest {
        attributes 'Main-Class': 'org.example.newteam.HelloApplication'
    }
    from {
        configurations["compileClasspath"].collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Para que los tests se ejecuten antes de generar el informe
jacocoTestReport {
    dependsOn test

    // Poner a true el/los tipo/s de archivo en que queramos que saque el reporte
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    // Exclusiones de cobertura
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "/models/",
                    "/errors/",
                    "/Main.*"
            ])
        }))
    }
}

// Verificación de cobertura mínima
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8 // 80% de cobertura mínima
            }
        }
    }
}

// Tarea personalizada para ejecutar tests y verificación
task testCoverage(group: 'verification', description: 'Runs the unit tests with coverage') {
    dependsOn test,
            jacocoTestReport,
            jacocoTestCoverageVerification
}
// Asegurar que Kotlin compile antes que Java
compileJava.dependsOn compileKotlin

// Fusionar las clases Kotlin en el mismo output que Java
tasks.named('compileKotlin') {
    kotlinOptions {
        destinationDirectory.set(file("build/classes/java/main"))
    }
}
// Opcional pero recomendado: limpiar el proyecto completo
clean {
    delete "build"
}